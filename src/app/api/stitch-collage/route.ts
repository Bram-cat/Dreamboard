import { NextRequest, NextResponse } from "next/server";
import { GoogleGenAI } from "@google/genai";

export async function POST(request: NextRequest) {
  try {
    const { images, goals } = await request.json();

    if (!images || !Array.isArray(images) || images.length === 0) {
      return NextResponse.json(
        { error: "Images array is required" },
        { status: 400 }
      );
    }

    console.log(`Stitching ${images.length} individual images into final collage...`);

    // Check API key
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      console.error("GEMINI_API_KEY not found in environment variables");
      return NextResponse.json(
        { error: "Gemini API key not configured" },
        { status: 500 }
      );
    }

    // Initialize Gemini client
    const genai = new GoogleGenAI({ apiKey });

    // Prepare all generated images as input parts
    const imageParts = images.map((imageDataUri: string) => {
      const base64Data = imageDataUri.split(',')[1];
      const mimeType = imageDataUri.split(';')[0].split(':')[1];
      return {
        inlineData: {
          data: base64Data,
          mimeType: mimeType
        }
      };
    });

    // Create a detailed prompt for stitching the collage
    const stitchPrompt = `Create a DENSE vision board collage by arranging ALL ${images.length} provided images into a magazine-style layout.

CRITICAL LAYOUT REQUIREMENTS:
- Use EVERY single image provided (all ${images.length} images)
- Arrange them as overlapping polaroid-style photos
- Cover 90% of the surface - minimal background visible
- Torn white borders on each photo element
- Tilt photos at various angles (5-25 degrees)
- Layer them with depth - some in front, some behind
- NO empty corners or large gaps

ARRANGEMENT STYLE:
- 3-4 large focal images in center and corners
- Remaining images as medium and small polaroids scattered throughout
- Heavy overlap creating visual interest
- Diagonal layering from all directions
- Magazine mood board aesthetic

TEXT ELEMENTS (add these as handwritten style):
- "2025" prominently
- "Grateful"
- "I am growing"
- "Dreams manifest"
- "Choose happiness"
- "Good vibes only"
- "${goals.split(',')[0]?.trim() || 'Goals'}"

BACKGROUND & STYLE:
- Warm beige/cream background (barely visible)
- Torn paper edges on all photos
- Film photography aesthetic
- Natural warm tones throughout
- Professional magazine quality

IMPORTANT: This is a collage assembly task - take the ${images.length} images and arrange them into a beautiful, dense vision board. DO NOT generate new content, just arrange what's provided into a cohesive collage.`;

    try {
      const contents = [...imageParts, { text: stitchPrompt }];

      console.log("Sending stitching request to Gemini...");

      const response = await genai.models.generateContent({
        model: "gemini-2.5-flash-image",
        contents: contents,
        config: {
          imageConfig: {
            aspectRatio: '16:9'  // 1344x768 for final collage
          }
        }
      });

      // Extract the collage image from response
      if (!response || !response.candidates || response.candidates.length === 0) {
        throw new Error("No collage generated by Gemini");
      }

      const candidate = response.candidates[0];
      if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
        throw new Error("No content parts in Gemini response");
      }

      // Find the image part
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const imagePart = candidate.content.parts.find((part: any) =>
        part.inlineData && part.inlineData.mimeType && part.inlineData.mimeType.startsWith('image/')
      );

      if (!imagePart || !imagePart.inlineData) {
        throw new Error("No image data in Gemini response");
      }

      // Convert base64 to data URI
      const collageDataUri = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;

      console.log("âœ“ Collage stitched successfully!");

      return NextResponse.json({
        collageUrl: collageDataUri,
        success: true,
        imagesUsed: images.length,
        model: "gemini-2.5-flash-image"
      });

    } catch (apiError: unknown) {
      console.error("Gemini stitching error:", apiError);
      if (apiError && typeof apiError === 'object') {
        if ('message' in apiError) {
          throw new Error(`Gemini API error: ${(apiError as Error).message}`);
        }
      }
      throw new Error(`Gemini API error: ${String(apiError)}`);
    }

  } catch (error: unknown) {
    console.error("Error stitching collage:", error);
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Failed to stitch collage",
        details: error instanceof Error ? error.stack : String(error),
      },
      { status: 500 }
    );
  }
}
